import os
from pathlib import Path
from tempfile import tempdir

import numpy as np
import pytest
from numpy.testing import assert_allclose, assert_almost_equal
from ross.defects.misalignment import MisalignmentFlex
from ross.units import Q_

# from ross.materials import steel
# from ross.shaft_element import ShaftElement, ShaftElement6DoF
import ross as rs


@pytest.fixture
def defect():

    steel = rs.materials.steel
    steel.rho = 7.85e3
    steel.E = 2.17e11
    #  Rotor with 6 DoFs, with internal damping, with 10 shaft elements, 2 disks and 2 bearings.
    i_d = 0
    o_d = 0.019
    n = 33

    # fmt: off
    L = np.array(
            [0  ,  25,  64, 104, 124, 143, 175, 207, 239, 271,
            303, 335, 345, 355, 380, 408, 436, 466, 496, 526,
            556, 586, 614, 647, 657, 667, 702, 737, 772, 807,
            842, 862, 881, 914]
            )/ 1000
    # fmt: on

    L = [L[i] - L[i - 1] for i in range(1, len(L))]

    shaft_elem = [
        rs.ShaftElement6DoF(
            material=steel,
            L=l,
            idl=i_d,
            odl=o_d,
            idr=i_d,
            odr=o_d,
            alpha=8.0501,
            beta=1.0e-5,
            rotary_inertia=True,
            shear_effects=True,
        )
        for l in L
    ]

    Id = 0.003844540885417
    Ip = 0.007513248437500

    disk0 = rs.DiskElement6DoF(n=12, m=2.6375, Id=Id, Ip=Ip)
    disk1 = rs.DiskElement6DoF(n=24, m=2.6375, Id=Id, Ip=Ip)

    kxx1 = 4.40e5
    kyy1 = 4.6114e5
    kzz = 0
    cxx1 = 27.4
    cyy1 = 2.505
    czz = 0
    kxx2 = 9.50e5
    kyy2 = 1.09e8
    cxx2 = 50.4
    cyy2 = 100.4553

    bearing0 = rs.BearingElement6DoF(
        n=4, kxx=kxx1, kyy=kyy1, cxx=cxx1, cyy=cyy1, kzz=kzz, czz=czz
    )
    bearing1 = rs.BearingElement6DoF(
        n=31, kxx=kxx2, kyy=kyy2, cxx=cxx2, cyy=cyy2, kzz=kzz, czz=czz
    )

    rotor = rs.Rotor(shaft_elem, [disk0, disk1], [bearing0, bearing1])

    massunbt = np.array([5e-4, 0])
    phaseunbt = np.array([-np.pi / 2, 0])

    misalignment = MisalignmentFlex(
        dt=0.1,
        tI=0,
        tF=5,
        kd=40 * 10 ** (3),
        ks=38 * 10 ** (3),
        eCOUPx=2 * 10 ** (-4),
        eCOUPy=2 * 10 ** (-4),
        misalignment_angle=5 * np.pi / 180,
        TD=0,
        TL=0,
        n1=0,
        speed=1200,
        massunb=massunbt,
        phaseunb=phaseunbt,
        mis_type="combined",
    )

    return misalignment


def test_defect_parameters(defect):
    assert defect.dt == 0.1
    assert defect.tI == 0
    assert defect.tF == 5
    assert defect.kd == 40 * 10 ** (3)
    assert defect.ks == 38 * 10 ** (3)
    assert defect.eCOUPx == 2 * 10 ** (-4)
    assert defect.eCOUPy == 2 * 10 ** (-4)
    assert defect.misalignment_angle == 5 * np.pi / 180
    assert defect.TD == 0
    assert defect.TL == 0
    assert defect.n1 == 0
    assert defect.speed == 1200


def test_defects_forces(defect):
    assert defect.forces[defect.n1 * 6, :] == pytest.approx(
        # fmt: off
        np.array(
        [-4.40604748,-4.40604748,-4.40604748,-4.40604748,-4.40604748,
        -4.40604748,-4.40604748,-4.40604748,-4.40604748,-4.40604748,
        -4.40604748,-4.40604748,-4.40604748,-4.40604748,-4.40604748,
        -4.40604748,-4.40604748,-4.40604748,-4.40604748,-4.40604748,
        -4.40604748,-4.40604748,-4.40604748,-4.40604748,-4.40604748,
        -4.40604748,-4.40604748,-4.40604748,-4.40604748,-4.40604748,
        -4.40604748,-4.40604748,-4.40604748,-4.40604748,-4.40604748,
        -4.40604748,-4.40604748,-4.40604748,-4.40604748,-4.40604748,
        -4.40604748,-4.40604748,-4.40604748,-4.40604748,-4.40604748,
        -4.40604748,-4.40604748,-4.40604748,-4.40604748,-4.40604748,
        -4.40604748,
        ]
        )
        # fmt: on
    )
    # assert mis_comb.forces[mis_comb.n1 * 6 + 1, :] == pytest.approx(
    #     # fmt: off
    #     np.array(
    #     [1.0821174,1.0821174,1.0821174,1.0821174,1.0821174,
    #     1.0821174,1.0821174,1.0821174,1.0821174,1.0821174,
    #     1.0821174,1.0821174,1.0821174,1.0821174,1.0821174,
    #     1.0821174,1.0821174,1.0821174,1.0821174,1.0821174,
    #     1.0821174,1.0821174,1.0821174,1.0821174,1.0821174,
    #     1.0821174,1.0821174,1.0821174,1.0821174,1.0821174,
    #     1.0821174,1.0821174,1.0821174,1.0821174,1.0821174,
    #     1.0821174,1.0821174,1.0821174,1.0821174,1.0821174,
    #     1.0821174,1.0821174,1.0821174,1.0821174,1.0821174,
    #     1.0821174,1.0821174,1.0821174,1.0821174,1.0821174,
    #     1.0821174,
    #     ]
    #     )
    #     # fmt: on
    # )

    # assert mis_comb.forces[mis_comb.n2 * 6, :] == pytest.approx(
    #     # fmt: off
    #     np.array(
    #     [4.40604748,4.40604748,4.40604748,4.40604748,4.40604748,
    #     4.40604748,4.40604748,4.40604748,4.40604748,4.40604748,
    #     4.40604748,4.40604748,4.40604748,4.40604748,4.40604748,
    #     4.40604748,4.40604748,4.40604748,4.40604748,4.40604748,
    #     4.40604748,4.40604748,4.40604748,4.40604748,4.40604748,
    #     4.40604748,4.40604748,4.40604748,4.40604748,4.40604748,
    #     4.40604748,4.40604748,4.40604748,4.40604748,4.40604748,
    #     4.40604748,4.40604748,4.40604748,4.40604748,4.40604748,
    #     4.40604748,4.40604748,4.40604748,4.40604748,4.40604748,
    #     4.40604748,4.40604748,4.40604748,4.40604748,4.40604748,
    #     4.40604748,
    #     ]
    #     )
    #     # fmt: on
    # )
    # assert mis_comb.forces[mis_comb.n2 * 6 + 1, :] == pytest.approx(
    #     # fmt: off
    #     np.array(
    #     [-1.0821174,-1.0821174,-1.0821174,-1.0821174,-1.0821174,
    #     -1.0821174,-1.0821174,-1.0821174,-1.0821174,-1.0821174,
    #     -1.0821174,-1.0821174,-1.0821174,-1.0821174,-1.0821174,
    #     -1.0821174,-1.0821174,-1.0821174,-1.0821174,-1.0821174,
    #     -1.0821174,-1.0821174,-1.0821174,-1.0821174,-1.0821174,
    #     -1.0821174,-1.0821174,-1.0821174,-1.0821174,-1.0821174,
    #     -1.0821174,-1.0821174,-1.0821174,-1.0821174,-1.0821174,
    #     -1.0821174,-1.0821174,-1.0821174,-1.0821174,-1.0821174,
    #     -1.0821174,-1.0821174,-1.0821174,-1.0821174,-1.0821174,
    #     -1.0821174,-1.0821174,-1.0821174,-1.0821174,-1.0821174,
    #     -1.0821174,
    #     ]
    #     )
    #     # fmt: on
    # )


# @pytest.fixture
# def mis_parallel():
#     steel = rs.materials.steel
#     steel.rho = 7.85e3
#     steel.E = 2.17e11
#     #  Rotor with 6 DoFs, with internal damping, with 10 shaft elements, 2 disks and 2 bearings.
#     i_d = 0
#     o_d = 0.019
#     n = 33

#     # fmt: off
#     L = np.array(
#             [0  ,  25,  64, 104, 124, 143, 175, 207, 239, 271,
#             303, 335, 345, 355, 380, 408, 436, 466, 496, 526,
#             556, 586, 614, 647, 657, 667, 702, 737, 772, 807,
#             842, 862, 881, 914]
#             )/ 1000
#     # fmt: on

#     L = [L[i] - L[i - 1] for i in range(1, len(L))]

#     shaft_elem = [
#         rs.ShaftElement6DoF(
#             material=steel,
#             L=l,
#             idl=i_d,
#             odl=o_d,
#             idr=i_d,
#             odr=o_d,
#             alpha=8.0501,
#             beta=1.0e-5,
#             rotary_inertia=True,
#             shear_effects=True,
#         )
#         for l in L
#     ]

#     Id = 0.003844540885417
#     Ip = 0.007513248437500

#     disk0 = rs.DiskElement6DoF(n=12, m=2.6375, Id=Id, Ip=Ip)
#     disk1 = rs.DiskElement6DoF(n=24, m=2.6375, Id=Id, Ip=Ip)

#     kxx1 = 4.40e5
#     kyy1 = 4.6114e5
#     kzz = 0
#     cxx1 = 27.4
#     cyy1 = 2.505
#     czz = 0
#     kxx2 = 9.50e5
#     kyy2 = 1.09e8
#     cxx2 = 50.4
#     cyy2 = 100.4553

#     bearing0 = rs.BearingElement6DoF(
#         n=4, kxx=kxx1, kyy=kyy1, cxx=cxx1, cyy=cyy1, kzz=kzz, czz=czz
#     )
#     bearing1 = rs.BearingElement6DoF(
#         n=31, kxx=kxx2, kyy=kyy2, cxx=cxx2, cyy=cyy2, kzz=kzz, czz=czz
#     )

#     rotor = rs.Rotor(shaft_elem, [disk0, disk1], [bearing0, bearing1])

#     massunbt = np.array([5e-4, 0])
#     phaseunbt = np.array([-np.pi / 2, 0])

#     misalignment = MisalignmentFlex(
#         dt=0.1,
#         tI=0,
#         tF=5,
#         kd=40 * 10 ** (3),
#         ks=38 * 10 ** (3),
#         eCOUPx=2 * 10 ** (-4),
#         eCOUPy=2 * 10 ** (-4),
#         misalignment_angle=5 * np.pi / 180,
#         TD=0,
#         TL=0,
#         n1=0,
#         speed=1200,
#         massunb=massunbt,
#         phaseunb=phaseunbt,
#         mis_type="parallel",
#     )

#     return misalignment


# def test_mis_parallel_forces(mis_parallel):
#     assert mis_parallel.forces[mis_parallel.n1 * 6, :] == pytest.approx(
#         # fmt: off
#         np.array(
#         [-6.78312529, -6.78312529, -6.78312529, -6.78312529, -6.78312529,
#        -6.78312529, -6.78312529, -6.78312529, -6.78312529, -6.78312529,
#        -6.78312529, -6.78312529, -6.78312529, -6.78312529, -6.78312529,
#        -6.78312529, -6.78312529, -6.78312529, -6.78312529, -6.78312529,
#        -6.78312529, -6.78312529, -6.78312529, -6.78312529, -6.78312529,
#        -6.78312529, -6.78312529, -6.78312529, -6.78312529, -6.78312529,
#        -6.78312529, -6.78312529, -6.78312529, -6.78312529, -6.78312529,
#        -6.78312529, -6.78312529, -6.78312529, -6.78312529, -6.78312529,
#        -6.78312529, -6.78312529, -6.78312529, -6.78312529, -6.78312529,
#        -6.78312529, -6.78312529, -6.78312529, -6.78312529, -6.78312529,
#        -6.78312529
#        ]
#        )
#         # fmt: on
#     )

#     assert mis_parallel.forces[mis_parallel.n1 * 6 + 1, :] == pytest.approx(
#         # fmt: off
#         np.array(
#         [1.0821174, 1.0821174, 1.0821174, 1.0821174, 1.0821174, 1.0821174,
#        1.0821174, 1.0821174, 1.0821174, 1.0821174, 1.0821174, 1.0821174,
#        1.0821174, 1.0821174, 1.0821174, 1.0821174, 1.0821174, 1.0821174,
#        1.0821174, 1.0821174, 1.0821174, 1.0821174, 1.0821174, 1.0821174,
#        1.0821174, 1.0821174, 1.0821174, 1.0821174, 1.0821174, 1.0821174,
#        1.0821174, 1.0821174, 1.0821174, 1.0821174, 1.0821174, 1.0821174,
#        1.0821174, 1.0821174, 1.0821174, 1.0821174, 1.0821174, 1.0821174,
#        1.0821174, 1.0821174, 1.0821174, 1.0821174, 1.0821174, 1.0821174,
#        1.0821174, 1.0821174, 1.0821174
#        ]
#        )
#         # fmt: on
#     )

#     assert mis_parallel.forces[mis_parallel.n2 * 6, :] == pytest.approx(
#         # fmt: off
#         np.array(
#         [6.78312529, 6.78312529, 6.78312529, 6.78312529, 6.78312529,
#        6.78312529, 6.78312529, 6.78312529, 6.78312529, 6.78312529,
#        6.78312529, 6.78312529, 6.78312529, 6.78312529, 6.78312529,
#        6.78312529, 6.78312529, 6.78312529, 6.78312529, 6.78312529,
#        6.78312529, 6.78312529, 6.78312529, 6.78312529, 6.78312529,
#        6.78312529, 6.78312529, 6.78312529, 6.78312529, 6.78312529,
#        6.78312529, 6.78312529, 6.78312529, 6.78312529, 6.78312529,
#        6.78312529, 6.78312529, 6.78312529, 6.78312529, 6.78312529,
#        6.78312529, 6.78312529, 6.78312529, 6.78312529, 6.78312529,
#        6.78312529, 6.78312529, 6.78312529, 6.78312529, 6.78312529,
#        6.78312529
#        ]
#        )
#         # fmt: on
#     )

#     assert mis_parallel.forces[mis_parallel.n2 * 6 + 1, :] == pytest.approx(
#         # fmt: off
#         np.array(
#         [-1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
#        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
#        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
#        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
#        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
#        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
#        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
#        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
#        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
#        -1.0821174, -1.0821174, -1.0821174, -1.0821174, -1.0821174,
#        -1.0821174
#        ]
#        )
#         # fmt: on
#     )
